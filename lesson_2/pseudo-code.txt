keyword                        meaning

START                                start of the program
SET                                     sets a variable we can use for later
GET                                     retrieve input from user
PRINT                                 displays output to user
READ                                   retrieve value from variable
IF / ELSE IF / ELSE           show conditional branches in logic
WHILE                                show looping logic
END                                     end of the program
DEF                                      define a method

1) a method that returns the sum of two integers

INFORMAL PSEUDO CODE

Create a method that takes two integers and add them
  - access the integers in the method and add them up.
  - return the result of the addition 
  - call the method and output the result.
        
FORMAL PSEUDO CODE

DEF adder int1 and int2
  int1 + int2
END

PRINT adder num1 and num2

def adder(num1, num2)
  num1 + num2
end

puts adder(3, 5)

2) a method that takes an array of strings, and returns a string that is all those strings concatenated together


INFORMAL PSEUDO CODE

Given a collection of strings 

Iterate through it one by one 
 - save the first value in a var as the starting value
  - for each iteration, concatinate the subsequent value to the starting value
after iterating through the entire collection, return the saved value.

FORMAL PSEUDO CODE

SET saved_str = empty string
SET iterator = 1

WHILE iterator <= collection size
  saved_str = saved_string + iterator value @ position 0 (first iteration)
  iterator = iterator + 1

  PRINT saved_str
END

def concat_str(arr)
  saved_str = ""
  arr.each do |word| 
    saved_str += word
  end
  saved_str 
end

p concat_str(['hi', 'how', 'are', 'you']) 


3) a method that takes an array of integers, and returns a new array with every other element


INFORMAL PSEUDO CODE

Given a collection of integers

create an empty array and save it to a var
iterate through the collection
  - for each iteration, select only the arr values for which iteration is either odd or even.
  - transfer them to the empty array

after iterating through the array of ints, return the new array generated.

FORMAL PSEUDO CODE

SET iterator = 1
SET new_arr = empty
SET idx_position = 0

WHILE iterator <= array length
  
  IF iterator is odd # (or even)
    new_arr << idx_position value
  ELSE
    move to the next iteration
    idx_position += 1
    iterator = iterator + 1

PRINT new_arr

END

def skip_elem(arr)
  new_arr = []
  idx = 0
  counter = 1

  while counter <= arr.size
    if counter.odd?
      new_arr << arr[idx]
    end
      idx += 1
      counter += 1
  end
  new_arr
end

p skip_elem([12, 42, 101, 45, 99, 2345, 123])








